{"version":3,"sources":["api/api-todolist.ts","features/CommonActions/App.ts","features/Application/applicationReducer.ts","utils/error-utils.ts","features/Application/selectors.tsx","features/Application/index.tsx","features/TodoListsList/todoList-reducer.ts","features/TodoListsList/tasks-reducer.ts","components/ErrorSnackbar/selectors.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/selectors.tsx","utils/redux-utils.ts","features/Login/Login.tsx","features/Login/authReducer.ts","features/Login/index.tsx","features/TodoListsList/TodolistsList.tsx","features/TodoListsList/Todolist/Task/Task.tsx","features/TodoListsList/Todolist/TodoList.tsx","features/TodoListsList/index.tsx","app/App.tsx","serviceWorker.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","axiosInstance","axios","create","baseURL","headers","withCredentials","todoListsAPI","get","title","post","todoId","delete","put","taskId","model","authAPI","data","appCommonActions","setIsLoggedInAC","createAction","initializedTC","createAsyncThunk","arg","thunkAPI","a","res","resultCode","dispatch","value","isInitialized","handleServerNetworkErrorSecond","AsyncAppActions","slice","createSlice","name","initialState","status","error","reducers","setAppStatusAC","state","action","payload","setAppErrorAC","extraReducers","builder","addCase","fulfilled","applicationReducer","reducer","actions","handleServerAppErrorSecond","showError","messages","length","rejectWithValue","errors","fields","fieldsErrors","err","message","undefined","selectStatus","app","selectIsInitialized","appActions","setTodoListsTC","createTodoListsTC","item","deleteTodoListsTC","todolistId","setTodoListsEntityStatusAC","todolistID","todoListID","updateTodoListsTC","param","todoListId","AsyncTodoListActions","changeTodoListFilterAC","index","findIndex","i","id","filter","entityStatus","unshift","map","tl","splice","todoListReducer","setTasksTC","todoLIstId","tasks","items","deleteTaskTC","params","setTaskEntityStatusAC","taskID","addTaskTC","updateTaskTC","getState","task","find","apiModel","deadline","description","priority","startDate","domainModel","AsyncTaskActions","forEach","t","tasksReducer","selectAppError","AddItemForm","React","memo","props","useState","setTitle","setError","onAddItemClick","trim","addItem","TextField","onChange","e","currentTarget","onKeyPress","key","variant","label","helperText","disabled","IconButton","color","onClick","style","marginLeft","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","display","width","Alert","elevation","ErrorSnackbar","useDispatch","handleClose","event","reason","useSelector","isOpen","Snackbar","open","autoHideDuration","onClose","severity","selectIsLoggedIn","auth","isLoggedIn","useAppDispatch","useActions","useMemo","bindActionCreators","Login","demo","formik","useFormik","initialValues","email","password","rememberMe","validate","values","onSubmit","formikHelpers","authActions","loginTC","rejected","match","setFieldError","field","to","Grid","container","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","handleBlur","handleChange","touched","textAlign","type","FormControlLabel","control","Checkbox","checked","Button","logoutTC","AsyncAuthActions","authReducer","TodoListsList","todoLists","authSelectors","todoListActions","addTodolist","result","Error","useEffect","padding","spacing","flexWrap","overflowX","tasksForTodoList","position","TodoList","todolist","Task","changeStatus","useCallback","Completed","New","changeTaskTitle","className","right","top","Delete","fontSize","console","log","addTask","removeTodoList","changeTodoListTitle","onButtonFilterClickHandler","renderFilterButton","buttonFilter","size","toUpperCase","Paper","listStyleType","todolistSlice","App","tasksSlice","logoutHandler","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","CircularProgress","height","Boolean","window","location","hostname","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.8b72acd7.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    headers: {\r\n        //'API-KEY': \"99c9c733-db8a-44c7-9158-dadaf379aa0f\"\r\n        'API-KEY': \"af2e12fe-a243-4dbc-9db5-644142644d59\"\r\n    },\r\n    withCredentials: true\r\n})\r\n\r\nexport const todoListsAPI = {\r\n    getTodoLists() {\r\n        return axiosInstance.get<Array<TodoListType>>(`todo-lists`);\r\n    },\r\n    createTodoList(title: string) {\r\n        return axiosInstance.post<ResponseType<{item: TodoListType}>>(`todo-lists`, {title: title})\r\n    },\r\n    deleteTodoList(todoId: string) {\r\n        return axiosInstance.delete<ResponseType>(`todo-lists/${todoId}`)\r\n    },\r\n    updateTodoList(todoId: string, title: string) {\r\n        return axiosInstance.put<ResponseType>(`todo-lists/${todoId}`, {title})\r\n    },\r\n    getTasks(todoId: string) {\r\n        return axiosInstance.get<GetTasksResponseType>(`todo-lists/${todoId}/tasks`)\r\n    },\r\n    createTask(todoId: string, title: string) {\r\n        return axiosInstance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todoId}/tasks`, {title})\r\n    },\r\n    deleteTask(todoId: string, taskId: string) {\r\n        return axiosInstance.delete<ResponseType>(`todo-lists/${todoId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todoId: string, taskId: string, model:UpdateTaskModelType) {\r\n        return axiosInstance.put<ResponseType<{item: TaskType}>>(`todo-lists/${todoId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: RequestLoginType) {\r\n        return axiosInstance.post<ResponseType<{userId: number}>>(\"auth/login\", data)\r\n    },\r\n    logout() {\r\n        return axiosInstance.delete<ResponseType>(\"auth/login\")\r\n    },\r\n    me() {\r\n        return axiosInstance.get<ResponseType<{id: number, email: string, login: string}>>(\"auth/me\")\r\n    }\r\n}\r\n\r\n// types\r\nexport type RequestLoginType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: boolean\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type TodoListType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport enum TaskStatuses{\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\n//Responses types\r\nexport type FieldsErrorsResponseType = { field: string, error: string };\r\nexport type ResponseType<D = {}> = {\r\n    data: D\r\n    resultCode: number\r\n    fieldsErrors: Array<FieldsErrorsResponseType>\r\n    messages: string[]\r\n}\r\ntype GetTasksResponseType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string\r\n}","import {createAction} from '@reduxjs/toolkit'\r\n\r\n\r\nconst setIsLoggedInAC = createAction<{ value: boolean }>('authAction/setIsLoggedIn')\r\n\r\nexport const appCommonActions = {\r\n    setIsLoggedInAC\r\n}","import {authAPI} from \"../../api/api-todolist\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {handleServerNetworkErrorSecond} from \"../../utils/error-utils\";\r\nimport {appCommonActions} from \"../CommonActions/App\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const initializedTC = createAsyncThunk(\"app/initialized\", async (arg, thunkAPI) => {\r\n    const res = await authAPI.me()\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(appCommonActions.setIsLoggedInAC({value: true}))\r\n        }\r\n        return {isInitialized: true}\r\n    } catch (err) {\r\n        return handleServerNetworkErrorSecond(err, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const AsyncAppActions = {\r\n    initializedTC\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC: (state, action: PayloadAction<{ error: string | null }>) => {\r\n            state.error = action.payload.error\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(initializedTC.fulfilled, (state, action) => {\r\n            state.isInitialized = action.payload.isInitialized\r\n        })\r\n    }\r\n})\r\n\r\nexport const applicationReducer = slice.reducer\r\n\r\nexport const {setAppStatusAC, setAppErrorAC} = slice.actions\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\ntype InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n","import {ResponseType} from \"../api/api-todolist\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../features/Application/applicationReducer\";\r\nimport {AxiosError} from \"axios\";\r\n\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\n\r\nexport const handleServerAppErrorSecond =\r\n    <D>(data: ResponseType<D>, thunkAPI: ThunkAPIType, showError: boolean = true) => {\r\n        if (showError) {\r\n            thunkAPI.dispatch(setAppErrorAC({error: data.messages.length ? data.messages[0] : \"Some error occurred\"}))\r\n        }\r\n        thunkAPI.dispatch(setAppStatusAC({status: \"failed\"}))\r\n        return thunkAPI.rejectWithValue({errors: data.messages, fields: data.fieldsErrors})\r\n    }\r\n\r\nexport const handleServerNetworkErrorSecond =\r\n    (err: AxiosError, thunkAPI: ThunkAPIType, showError: boolean = true) => {\r\n        if (showError) {\r\n            thunkAPI.dispatch(setAppErrorAC({error: err.message}))\r\n        }\r\n        thunkAPI.dispatch(setAppStatusAC({status: \"failed\"}))\r\n        return thunkAPI.rejectWithValue({errors: [err.message], fields: undefined})\r\n    }","import {RootStateType} from \"../../utils/types\";\r\n\r\nexport const selectStatus = (state: RootStateType) => state.app.status\r\nexport const selectIsInitialized = (state: RootStateType) => state.app.isInitialized","import * as appSelectors from \"./selectors\"\r\nimport {AsyncAppActions, slice} from \"./applicationReducer\";\r\n\r\nconst appActions = {\r\n    ...AsyncAppActions,\r\n    ...slice.actions\r\n}\r\n\r\nexport {\r\n    appSelectors,\r\n    appActions\r\n}","import {todoListsAPI, TodoListType} from \"../../api/api-todolist\";\r\nimport {RequestStatusType} from \"../Application/applicationReducer\";\r\nimport {handleServerAppErrorSecond, handleServerNetworkErrorSecond} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AsyncActionsRejectedValueType} from \"../../utils/types\";\r\nimport {appActions} from \"../Application\"\r\n\r\nconst {setAppStatusAC} = appActions;\r\n\r\nlet initialState: Array<TodoListDomainType> = []\r\n\r\nexport const setTodoListsTC = createAsyncThunk<TodoListType[], void, AsyncActionsRejectedValueType>(\"todoList/setTodoLists\", async (arg, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n    try {\r\n        const res = await todoListsAPI.getTodoLists()\r\n        thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        return res.data\r\n    } catch (err) {\r\n        return handleServerNetworkErrorSecond(err, thunkAPI)\r\n    }\r\n})\r\nexport const createTodoListsTC = createAsyncThunk<\r\n    TodoListType, string, AsyncActionsRejectedValueType\r\n    >(\"todoList/createTodoList\", async (title, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n    try {\r\n        const res = await todoListsAPI.createTodoList(title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            return res.data.data.item\r\n        } else {\r\n            return handleServerAppErrorSecond(res.data, thunkAPI)\r\n        }\r\n    } catch (err) {\r\n        // handleServerNetworkError(err, thunkAPI.dispatch)\r\n        // return thunkAPI.rejectWithValue({errors: err.message, fields: undefined})\r\n        return handleServerNetworkErrorSecond(err, thunkAPI)\r\n    }\r\n})\r\nexport const deleteTodoListsTC = createAsyncThunk<\r\n    {todoListID: string}, string, AsyncActionsRejectedValueType\r\n    >(\"todoList/deleteTodoList\", async (todolistId, thunkAPI) => {\r\n    thunkAPI.dispatch(setTodoListsEntityStatusAC({todolistID: todolistId, status: \"loading\"}))\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n    const res = await todoListsAPI.deleteTodoList(todolistId)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            return {todoListID: todolistId}\r\n        } else {\r\n            return handleServerAppErrorSecond(res.data, thunkAPI)\r\n        }\r\n    } catch (err) {\r\n        return handleServerNetworkErrorSecond(err, thunkAPI)\r\n    }\r\n})\r\nexport const updateTodoListsTC = createAsyncThunk(\"todoList/updateTodoList\", async (param: {todolistId: string, title: string}, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n        try {\r\n            const res = await todoListsAPI.updateTodoList(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n                return {todoListId: param.todolistId, title: param.title}\r\n            } else {\r\n                return handleServerAppErrorSecond(res.data, thunkAPI)\r\n            }\r\n        } catch (err) {\r\n            return handleServerNetworkErrorSecond(err, thunkAPI)\r\n        }\r\n})\r\n\r\nexport const AsyncTodoListActions = {\r\n    setTodoListsTC,\r\n    createTodoListsTC,\r\n    deleteTodoListsTC,\r\n    updateTodoListsTC\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: \"todoList\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        changeTodoListFilterAC: (state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) => {\r\n            const index = state.findIndex(i => i.id === action.payload.id)\r\n            if (index > -1) {\r\n                state[index].filter = action.payload.filter\r\n            }\r\n        },\r\n        setTodoListsEntityStatusAC: (state, action: PayloadAction<{ todolistID: string, status: RequestStatusType }>) => {\r\n            const index = state.findIndex(i => i.id === action.payload.todolistID)\r\n            if (index > -1) {\r\n                state[index].entityStatus = action.payload.status\r\n            }\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(updateTodoListsTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(i => i.id === action.payload.todoListId)\r\n            if (index > -1) {\r\n                state[index].title = action.payload.title\r\n            }\r\n        })\r\n        builder.addCase(createTodoListsTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload, filter: \"all\", entityStatus: \"idle\"})\r\n        })\r\n        builder.addCase(setTodoListsTC.fulfilled, (state, action) => {\r\n            return action.payload.map(tl => ({...tl, filter: \"all\", entityStatus: \"idle\"}))\r\n        })\r\n        builder.addCase(deleteTodoListsTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(i => i.id === action.payload.todoListID)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\nexport const todoListReducer = slice.reducer\r\n\r\nexport const {changeTodoListFilterAC, setTodoListsEntityStatusAC} = slice.actions\r\n\r\n// types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","import {TaskPriorities, TaskStatuses, TaskType, todoListsAPI, UpdateTaskModelType} from \"../../api/api-todolist\";\r\nimport {RequestStatusType} from \"../Application/applicationReducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {handleServerAppErrorSecond, handleServerNetworkErrorSecond} from \"../../utils/error-utils\";\r\nimport {AsyncTodoListActions} from \"./todoList-reducer\"\r\nimport {AsyncActionsRejectedValueType, RootStateType} from \"../../utils/types\";\r\nimport {appActions} from \"../Application\"\r\n\r\nconst {setAppStatusAC} = appActions;\r\n\r\nlet initialState: TasksStateType = {}\r\n\r\nexport const setTasksTC = createAsyncThunk<\r\n    {tasks: Array<TaskType>, todoLIstId: string},\r\n    string,\r\n    AsyncActionsRejectedValueType\r\n    >('tasks/setTasks', async (todoLIstId, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n    try {\r\n        let res = await todoListsAPI.getTasks(todoLIstId)\r\n        thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        return {tasks: res.data.items, todoLIstId: todoLIstId}\r\n    } catch (err) {\r\n        return handleServerNetworkErrorSecond(err, thunkAPI)\r\n    }\r\n})\r\nexport const deleteTaskTC = createAsyncThunk<\r\n    {taskID: string, todoListId: string}, { todoLIstId: string, taskId: string }, AsyncActionsRejectedValueType\r\n    >('tasks/deleteTask', async (params: { todoLIstId: string, taskId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n    thunkAPI.dispatch(setTaskEntityStatusAC({taskId: params.taskId, status: \"loading\", todoLIstId: params.todoLIstId}))\r\n    try {\r\n        let res = await todoListsAPI.deleteTask(params.todoLIstId, params.taskId)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            return {taskID: params.taskId, todoListId: params.todoLIstId}\r\n        } else {\r\n            thunkAPI.dispatch(setTaskEntityStatusAC({\r\n                taskId: params.taskId,\r\n                status: \"failed\",\r\n                todoLIstId: params.todoLIstId\r\n            }))\r\n            return handleServerAppErrorSecond(res.data, thunkAPI)\r\n        }\r\n    } catch (err) {\r\n        return handleServerNetworkErrorSecond(err, thunkAPI)\r\n    }\r\n})\r\nexport const addTaskTC = createAsyncThunk<\r\n    TaskType,\r\n    { todoLIstId: string, title: string },\r\n    AsyncActionsRejectedValueType\r\n    >('tasks/addTask', async (param: { todoLIstId: string, title: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n    try {\r\n        let res = await todoListsAPI.createTask(param.todoLIstId, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            return res.data.data.item\r\n        } else {\r\n            return handleServerAppErrorSecond(res.data, thunkAPI)\r\n        }\r\n    } catch (err) {\r\n        return handleServerNetworkErrorSecond(err, thunkAPI)\r\n    }\r\n})\r\nexport const updateTaskTC = createAsyncThunk<{ taskID: string, model: UpdateDomainTaskModelType, todoListID: string },\r\n    { todoListId: string, taskId: string, domainModel: UpdateDomainTaskModelType },\r\n    { state: RootStateType}>('tasks/updateTask', async (param, thunkAPI) => {\r\n    const state = thunkAPI.getState()\r\n\r\n    const task = state.tasks[param.todoListId].find((tl) => tl.id === param.taskId)\r\n\r\n    if (task) {\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            status: task.status,\r\n            ...param.domainModel\r\n        }\r\n        thunkAPI.dispatch(setTaskEntityStatusAC({\r\n            taskId: param.taskId,\r\n            status: \"loading\",\r\n            todoLIstId: param.todoListId\r\n        }))\r\n        thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n\r\n        try {\r\n            let res = await todoListsAPI.updateTask(param.todoListId, param.taskId, apiModel)\r\n            thunkAPI.dispatch(setTaskEntityStatusAC({\r\n                taskId: param.taskId,\r\n                status: \"idle\",\r\n                todoLIstId: param.todoListId\r\n            }))\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n                return {taskID: param.taskId, model: param.domainModel, todoListID: param.todoListId}\r\n            } else {\r\n                return handleServerAppErrorSecond(res.data, thunkAPI)\r\n            }\r\n        } catch (err) {\r\n            thunkAPI.dispatch(setTaskEntityStatusAC({\r\n                taskId: param.taskId,\r\n                status: \"idle\",\r\n                todoLIstId: param.todoListId\r\n            }))\r\n            return handleServerNetworkErrorSecond(err, thunkAPI)\r\n        }\r\n    } else {\r\n        return thunkAPI.rejectWithValue(\"rejected\")\r\n    }\r\n})\r\n\r\nexport const AsyncTaskActions = {\r\n    setTasksTC,\r\n    deleteTaskTC,\r\n    addTaskTC,\r\n    updateTaskTC\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setTaskEntityStatusAC: (state, action: PayloadAction<{ taskId: string, status: RequestStatusType, todoLIstId: string }>) => {\r\n            const index = state[action.payload.todoLIstId].findIndex(i => i.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                state[action.payload.todoLIstId][index].entityStatus = action.payload.status\r\n            }\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(AsyncTodoListActions.setTodoListsTC.fulfilled, (state, action) => {\r\n            action.payload.forEach((tl) => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n        builder.addCase(AsyncTodoListActions.createTodoListsTC.fulfilled, (state, action) => {\r\n            state[action.payload.id] = []\r\n        })\r\n        builder.addCase(AsyncTodoListActions.deleteTodoListsTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.todoListID]\r\n        })\r\n        builder.addCase(setTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todoLIstId] = action.payload.tasks.map((t) => ({...t, entityStatus: 'idle'}))\r\n        })\r\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift({...action.payload, entityStatus: 'idle'})\r\n        })\r\n        builder.addCase(deleteTaskTC.fulfilled, (state, action) => {\r\n            const index = state[action.payload.todoListId].findIndex(i => i.id === action.payload.taskID)\r\n            if (index > -1) {\r\n                state[action.payload.todoListId].splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n            const index = state[action.payload.todoListID].findIndex(i => i.id === action.payload.taskID)\r\n            if (index > -1) {\r\n                state[action.payload.todoListID][index] = {...state[action.payload.todoListID][index], ...action.payload.model}\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\nexport const {setTaskEntityStatusAC} = slice.actions\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\nexport type TaskDomainType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n}","import {RootStateType} from \"../../utils/types\";\r\n\r\nexport const selectAppError = (state: RootStateType) => state.app.error","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormHelperObjectType = {setTitle: (title: string) => void, setError: (error: string) => void}\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string, helper?: AddItemFormHelperObjectType) => void\r\n    disabled?: boolean\r\n}\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    const [title, setTitle] = useState<string>(\"\");\r\n    let [error, setError] = useState<null | string>(null);\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        setTitle(e.currentTarget.value)\r\n    };\r\n\r\n    const onAddItemKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            onAddItemClick();\r\n        }\r\n    };\r\n\r\n    const onAddItemClick = async () => {\r\n        if (title.trim() !== \"\") {\r\n            try {\r\n                await props.addItem(title.trim())\r\n                setTitle(\"\")\r\n            } catch (error) {\r\n                setError(error.message)\r\n            }\r\n        } else {\r\n            setError(\"Title is required!\");\r\n        }\r\n    }\r\n    const onAddItemClickSecondVariant = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle !== \"\") {\r\n            props.addItem(trimmedTitle, {setTitle, setError})\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onAddItemKeyPress}\r\n                value={title}\r\n                variant={\"outlined\"}\r\n                error={!!error}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n                disabled={props.disabled}\r\n            />\r\n            <IconButton\r\n                color={\"primary\"}\r\n                onClick={onAddItemClick}\r\n                style={{marginLeft: \"10px\"}}\r\n                disabled={props.disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (value: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo( ({disabled = false, ...props}: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState(props.title)\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false);\r\n        if(title.trim()){\r\n            props.changeTitle(title.trim());\r\n        }\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode && !disabled ?\r\n        <TextField\r\n            value={title}\r\n            autoFocus={true}\r\n            onBlur={offEditMode}\r\n            onChange={onChangeTitle}\r\n        />\r\n        :\r\n       <span onDoubleClick={() => !disabled && onEditMode()} style={{display: \"inline-block\", width: \"70%\"}}>{props.title}</span>\r\n} )","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setAppErrorAC} from \"../../features/Application/applicationReducer\";\r\nimport {selectAppError} from \"../index\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    const error = useSelector(selectAppError)\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n            <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\">\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n    );\r\n}","import {RootStateType} from \"../../utils/types\";\r\n\r\nexport const selectIsLoggedIn = (state: RootStateType) => state.auth.isLoggedIn","import {useDispatch} from \"react-redux\";\r\nimport {ActionCreatorsMapObject, bindActionCreators} from \"redux\";\r\nimport {useMemo} from \"react\";\r\nimport {AppDispatchType} from \"./types\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [])\r\n\r\n    return boundActions\r\n}","import React, {useEffect} from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {authActions} from \"./\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {useAppDispatch} from \"../../utils/redux-utils\";\r\nimport {RootStateType} from \"../../utils/types\";\r\nimport {appCommonActions} from \"../CommonActions/App\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\ntype LoginPropsType = {\r\n    demo?: boolean\r\n}\r\nexport const Login = ({demo = false}: LoginPropsType) => {\r\n\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useSelector<RootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Email is required\"\r\n            } /*else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }*/\r\n\r\n            if (!values.password) {\r\n                errors.password = \"Password is required\"\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Password is too short'\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: async (values, formikHelpers) => {\r\n            if (!demo) {\r\n\r\n                const action = await dispatch(authActions.loginTC(values))\r\n\r\n                if (authActions.loginTC.rejected.match(action)) {\r\n                    if (action.payload && action.payload.fields?.length) {\r\n                        formikHelpers.setFieldError(action.payload.fields[0].field, action.payload.fields[0].error)\r\n                    }\r\n                }\r\n            } else {\r\n                dispatch(appCommonActions.setIsLoggedInAC({value: true}))\r\n            }\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={3}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: p0chta.testovaya@yandex.ru</p>\r\n                        <p>Password: qwerty123</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            name={\"email\"}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.email}\r\n                            onChange={formik.handleChange}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: \"red\", textAlign: \"center\"}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            name={\"password\"}\r\n                            value={formik.values.password}\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: \"red\", textAlign: \"center\"}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                name={\"rememberMe\"}\r\n                                checked={formik.values.rememberMe}\r\n                                onChange={formik.handleChange}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import {authAPI, RequestLoginType} from \"../../api/api-todolist\";\r\nimport {handleServerAppErrorSecond, handleServerNetworkErrorSecond} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {AsyncActionsRejectedValueType} from \"../../utils/types\";\r\nimport {appCommonActions} from \"../CommonActions/App\";\r\nimport {appActions} from \"../Application\"\r\n\r\nconst {setAppStatusAC} = appActions;\r\n\r\nexport const loginTC = createAsyncThunk<\r\n    void,\r\n    RequestLoginType,\r\n    AsyncActionsRejectedValueType>(\"auth/login\", async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleServerAppErrorSecond(res.data, thunkAPI)\r\n        }\r\n    } catch (err) {\r\n        return handleServerNetworkErrorSecond(err, thunkAPI)\r\n    }\r\n})\r\nexport const logoutTC = createAsyncThunk(\"auth/logout\", async (arg, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleServerAppErrorSecond(res.data, thunkAPI)\r\n        }\r\n    } catch (err) {\r\n        return handleServerNetworkErrorSecond(err, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const AsyncAuthActions = {\r\n    loginTC,\r\n    logoutTC\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder.addCase(loginTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = true\r\n        })\r\n        builder.addCase(logoutTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = false\r\n        })\r\n        builder.addCase(appCommonActions.setIsLoggedInAC, (state, action) => {\r\n            state.isLoggedIn = action.payload.value\r\n        })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\n","import * as authSelectors from \"./selectors\"\r\nimport {Login} from \"./Login\";\r\nimport {AsyncAuthActions, slice} from \"./authReducer\";\r\n\r\nconst authActions = {\r\n    ...AsyncAuthActions\r\n}\r\n\r\nconst authReducer = slice.reducer\r\n\r\nexport {\r\n    authSelectors,\r\n    Login,\r\n    authActions,\r\n    authReducer\r\n}","import React, {useEffect} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {TodoListDomainType,} from \"./todoList-reducer\";\r\nimport {TasksStateType} from \"./tasks-reducer\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components\";\r\nimport {TodoList} from \"./\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {authSelectors} from \"../Login\";\r\nimport {todoListActions} from \"./index\";\r\nimport {useActions, useAppDispatch} from \"../../utils/redux-utils\";\r\nimport {RootStateType} from \"../../utils/types\";\r\n\r\ntype TodoListsListPropsType = {\r\n    demo?: boolean\r\n}\r\nexport const TodoListsList = ({demo = false}: TodoListsListPropsType) => {\r\n    let todoLists = useSelector<RootStateType, Array<TodoListDomainType>>(state => state.todoLists)\r\n    let tasks = useSelector<RootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const {setTodoListsTC} = useActions(todoListActions)\r\n\r\n    const addTodolist = async (title: string) => {\r\n        const result = await dispatch(todoListActions.createTodoListsTC(title))\r\n        if (todoListActions.createTodoListsTC.rejected.match(result)) {\r\n            if (result.payload?.errors?.length) {\r\n                throw new Error(result.payload.errors[0])\r\n            } else {\r\n                throw new Error(\"Some error occurred\")\r\n            }\r\n        }\r\n    }\r\n   /* const addTodolistSecondVariant = async (title: string, helper?: AddItemFormHelperObjectType) => {\r\n        const result = await dispatch(todoListActions.createTodoListsTC(title))\r\n        if (todoListActions.createTodoListsTC.rejected.match(result)) {\r\n            if (result.payload?.errors?.length) {\r\n                helper?.setError(result.payload.errors[0])\r\n            } else {\r\n                helper?.setError(\"Some error occurred\")\r\n            }\r\n        } else {\r\n            helper?.setTitle(\"\")\r\n        }\r\n    }*/\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        setTodoListsTC()\r\n    }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (<>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={5} style={{flexWrap: \"nowrap\", overflowX: \"scroll\"}}>\r\n            {\r\n                todoLists.map(tl => {\r\n                    let tasksForTodoList = tasks[tl.id];\r\n\r\n                    return (\r\n                        <Grid item key={tl.id} >\r\n                            <div style={{width: \"350px\", position: \"relative\"}}>\r\n                                <TodoList\r\n                                    todolist={tl}\r\n                                    tasks={tasksForTodoList}\r\n                                    demo={demo}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    </>)\r\n}","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses} from \"../../../../api/api-todolist\";\r\nimport {AsyncTaskActions, TaskDomainType} from \"../../tasks-reducer\";\r\nimport {useActions} from \"../../../../utils/redux-utils\";\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskDomainType\r\n}\r\nexport const Task = React.memo(({task}: TaskPropsType) => {\r\n\r\n    const {deleteTaskTC, updateTaskTC} = useActions(AsyncTaskActions)\r\n\r\n    const removeTask = () => {\r\n        deleteTaskTC({taskId: task.id, todoLIstId: task.todoListId})\r\n    };\r\n    const changeStatus = useCallback( (e: ChangeEvent<HTMLInputElement>) => {\r\n        updateTaskTC({\r\n            taskId: task.id,\r\n            todoListId: task.todoListId,\r\n            domainModel: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New}\r\n        })\r\n    }, [task.id, task.todoListId])\r\n    const changeTaskTitle = useCallback( (title: string) => {\r\n        updateTaskTC({\r\n            taskId: task.id,\r\n            todoListId: task.todoListId,\r\n            domainModel: {title}\r\n        })\r\n    },[task.id, task.todoListId])\r\n\r\n    return (\r\n        <li className={task.status === TaskStatuses.Completed ? \"isDone\" : \"\"} key={task.id} style={{position: \"relative\"}}>\r\n            <Checkbox\r\n                onChange={changeStatus}\r\n                checked={task.status === TaskStatuses.Completed}\r\n                color={\"primary\"}\r\n                disabled={task.entityStatus === \"loading\"}\r\n            />\r\n            <EditableSpan title={task.title} changeTitle={changeTaskTitle} disabled={task.entityStatus === \"loading\"}/>\r\n            <IconButton\r\n                onClick={removeTask}\r\n                style={{position: \"absolute\", right: \"0\", top: \"2px\"}}\r\n                color={\"primary\"}\r\n                disabled={task.entityStatus === \"loading\"}>\r\n                <Delete fontSize={\"small\"}/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton, Paper, PropTypes} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/api-todolist\";\r\nimport {FilterValuesType, TodoListDomainType} from \"../todoList-reducer\";\r\nimport {AsyncTaskActions, TaskDomainType} from \"../tasks-reducer\";\r\nimport {todoListActions} from \"../index\";\r\nimport {AsyncThunkAction} from \"@reduxjs/toolkit\";\r\nimport {useActions} from \"../../../utils/redux-utils\";\r\n\r\n\r\ntype PropsType = {\r\n    todolist: TodoListDomainType\r\n    tasks: Array<TaskDomainType>\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoList = React.memo((props: PropsType) => {\r\n    console.log(\"TODOLIST\")\r\n\r\n    const {setTasksTC, addTaskTC} = useActions(AsyncTaskActions)\r\n    const {changeTodoListFilterAC, deleteTodoListsTC, updateTodoListsTC} = useActions(todoListActions)\r\n\r\n\r\n    const addTask = useCallback(async (title: string) => {\r\n            let result = await addTaskTC({title, todoLIstId: props.todolist.id}) as\r\n                AsyncThunkAction<\r\n                    TaskType,\r\n                    { todoLIstId: string; title: string; },\r\n                    {rejectValue: { errors: Array<string>, fields: Array<any> }}> & {type: any}//dispatch(AsyncTaskActions.addTaskTC({todoLIstId: props.todolist.id, title}))\r\n\r\n            if (AsyncTaskActions.addTaskTC.rejected.match(result)) {\r\n                if(result.payload?.errors?.length) {\r\n                    throw new Error(result.payload.errors[0])\r\n                } else {\r\n                    throw new Error(\"Some error occurred\")\r\n                }\r\n            }\r\n    }, [props.todolist.id])\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.demo) {\r\n            return\r\n        }\r\n        setTasksTC(props.todolist.id)\r\n    }, [])\r\n\r\n    const removeTodoList = useCallback(() => {\r\n        deleteTodoListsTC(props.todolist.id)\r\n    }, [props.todolist.id])\r\n\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        updateTodoListsTC({todolistId: props.todolist.id, title: title})\r\n    }, [props.todolist.id])\r\n\r\n    let tasks = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasks = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasks = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const onButtonFilterClickHandler = useCallback( (filter: FilterValuesType) => {\r\n        changeTodoListFilterAC({id: props.todolist.id, filter: filter})\r\n    }, [props.todolist.id])\r\n\r\n    const renderFilterButton = (buttonFilter: FilterValuesType, color: PropTypes.Color) => {\r\n        return (\r\n            <Button\r\n                size={\"small\"}\r\n                variant={props.todolist.filter === buttonFilter ? \"contained\" : \"outlined\"}\r\n                color={color}\r\n                onClick={() => onButtonFilterClickHandler(buttonFilter)}>\r\n                {buttonFilter.slice(0, 1).toUpperCase() + buttonFilter.slice(1)}\r\n            </Button>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Paper elevation={3} style={{padding: \"1px 20px 20px 20px\"}}>\r\n            <h3>\r\n                <EditableSpan\r\n                title={props.todolist.title}\r\n                changeTitle={changeTodoListTitle}\r\n                disabled={props.todolist.entityStatus === \"loading\"}\r\n            />\r\n                <IconButton\r\n                    onClick={removeTodoList}\r\n                    style={{position: \"absolute\", right: \"5px\", top: \"4px\"}}\r\n                    disabled={props.todolist.entityStatus === \"loading\"}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === \"loading\"}/>\r\n\r\n            <ul style={{listStyleType: \"none\", padding: \"0\"}}>\r\n                {\r\n                    tasks.map(task => <Task key={task.id} task={task}/>)\r\n                }\r\n                {!tasks.length && <div style={{padding: \"10px\", color: \"grey\"}}>No tasks</div>}\r\n            </ul>\r\n            <div>\r\n                {renderFilterButton(\"all\", \"primary\")}\r\n                {renderFilterButton(\"active\", \"primary\")}\r\n                {renderFilterButton(\"completed\", \"primary\")}\r\n            </div>\r\n        </Paper>\r\n    );\r\n})\r\n\r\n","import {AsyncTaskActions, slice as tasksSlice} from \"./tasks-reducer\";\r\nimport {AsyncTodoListActions, slice as todolistSlice} from \"./todoList-reducer\"\r\nimport {TodoListsList} from \"./TodolistsList\"\r\nimport {TodoList} from \"./Todolist/TodoList\";\r\n\r\nconst todoListActions = {\r\n    ...AsyncTodoListActions,\r\n    ...todolistSlice.actions\r\n}\r\nconst tasksActions = {\r\n    ...AsyncTaskActions,\r\n    ...tasksSlice.actions\r\n}\r\n\r\nconst todolistReducer = todolistSlice.reducer\r\nconst tasksReducer = tasksSlice.reducer\r\n\r\nexport {\r\n    tasksActions,\r\n    todoListActions,\r\n    TodoListsList,\r\n    tasksReducer,\r\n    todolistReducer,\r\n    TodoList\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {TodoListsList} from \"../features/TodoListsList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {appActions} from \"../features/Application\";\r\nimport {ErrorSnackbar} from \"../components\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Login} from \"../features/Login\";\r\nimport {authActions} from \"../features/Login/\";\r\nimport {selectIsInitialized, selectStatus} from \"../features/Application/selectors\";\r\nimport {authSelectors} from \"../features/Login\";\r\nimport {appCommonActions} from \"../features/CommonActions/App\";\r\n\r\ntype AppPropsType = {\r\n    demo?: boolean\r\n}\r\nconst App = React.memo(({demo = false}:AppPropsType) => {\r\n\r\n    const status = useSelector(selectStatus)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if(!demo) {\r\n            dispatch(appActions.initializedTC())\r\n        }\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        if(!demo) {\r\n            dispatch(authActions.logoutTC())\r\n        } else {\r\n            dispatch(appCommonActions.setIsLoggedInAC({value: false}))\r\n        }\r\n    }, [])\r\n\r\n    if(!isInitialized) {\r\n        return <div style={{textAlign:'center', position:'fixed', top:'50%', width:'100%'}}>\r\n            <CircularProgress style={{width:'100px', height: \"100px\"}}/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button onClick={logoutHandler} color=\"inherit\">Log Out</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === \"loading\" && <LinearProgress color=\"secondary\" style={{display: \"absolute\"}}/>}\r\n            <Container fixed={true}>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodoListsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1 style={{textAlign: \"center\"}}>404:Page not found</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {ActionCreatorsMapObject, bindActionCreators, combineReducers} from \"redux\";\r\nimport {todoListReducer} from \"../features/TodoListsList/todoList-reducer\";\r\nimport {tasksReducer} from \"../features/TodoListsList/tasks-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {applicationReducer} from \"../features/Application/applicationReducer\";\r\nimport {authReducer} from \"../features/Login/authReducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useMemo} from \"react\";\r\nimport {FieldsErrorsResponseType} from \"../api/api-todolist\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: todoListReducer,\r\n    tasks: tasksReducer,\r\n    app: applicationReducer,\r\n    auth: authReducer\r\n})\r\n\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>\r\n    , document.getElementById('root'));\r\n\r\n// https://git.heroku.com/infinite-woodland-84760.git\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}